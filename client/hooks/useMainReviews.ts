import { useState, useEffect } from 'react';
import { Review } from '@shared/api';

export interface MainReview {
  id: string;
  avatar: string;
  text: string;
  stars?: number;
  createdAt: string;
}

// –î–µ—Ñ–æ–ª—Ç–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
const defaultReviews1: MainReview[] = [
  {
    id: "default1-1",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/cdb95157596678dcd21a38073c5dcce3c7845536?width=124",
    text: "–î—è–∫—É—é, –º–∏–ª—É—é—Å—å, –¥—É–∂–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è üòç",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default1-2",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/cdb95157596678dcd21a38073c5dcce3c7845536?width=124",
    text: "–ü–ª—ñ–≤–æ—á–∫—É –∑–Ω—è–ª–∞, —Ç—Ä–æ—à–∫–∏ —â–µ —à–∫—ñ—Ä–∞ –≤—ñ–¥—à—É–ª—É—à—É—î—Ç—å—Å—è –∞–ª–µ –≤—Å–µ —á—É–¥–æ–≤–æ, –≤—Å—ñ –∑–≤–µ—Ä—Ç–∞—é—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ü–µ —Ç–∞—Ç—É, —Ç—ñ–ª—å–∫–∏ —Ö–æ–¥–∂—É —ñ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏ –∑–±–∏—Ä–∞—é, –≤—ñ–¥–≥—É–∫ –∑—Ä–æ–±–ª—é –∫–æ–ª–∏ –≤–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–∂–∏–≤–µ, –º–µ–Ω—ñ –¥—É—É—É–∂–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —â–æ –≤–∏–π—à–ª–æ",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default1-3",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/50539832474100cc93c13a30455d91939b986e3b?width=124",
    text: "–î—É–∂–µ –¥—è–∫—É—é –≤–∞–º –∑–∞ —Ç–∞–∫—É –∫—Ä–∞—Å—Éü•∞",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default1-4",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/2729787a24c3ce7f2d8e56cf9df4a559357dd1cc?width=124",
    text: "–î—è–∫—É—é –≤–∞–º –≤–µ–ª–∏–∫–µ, –¥—ñ–π—Å–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ—á–µ—Ä–∫ —Ç–∞—Ç–∫–∞",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default1-5",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/4f321696851b976b89571c1e7b153c95b21343cd?width=124",
    text: "–í –º–µ–Ω–µ –≤—Å—ñ –≤ –≤–æ—Å—Ç–æ—Ä–∑—ñ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è–ºüòçüòçüòç",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
];

// –î–µ—Ñ–æ–ª—Ç–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä—è–¥–∫–∞
const defaultReviews2: MainReview[] = [
  {
    id: "default2-1",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/0acf3d9092acdfa26325861372ef538be625cfbb?width=124",
    text: "–©–∏—Ä–æ –¥—è–∫—É—é —è —Ü—ñ–ª–∏–π –≤–µ—á—ñ—Ä –Ω–∏–º–∏ –ª—é–±—É—é—Å—å",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default2-2",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/0acf3d9092acdfa26325861372ef538be625cfbb?width=124",
    text: "–†–æ–±–∏–ª–∞ —É –≤–∞—Å —Å–≤–æ—î –ø–µ—Ä—à–µ –¥–æ–≤–≥–æ–æ—á—ñ–∫—É–≤–∞–Ω–µ —Ç–∞—Ç—É—é–≤–∞–Ω–Ω—è, –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —è –ø—Ä–æ—Å—Ç–æ –≤ –∑–∞—Ö–≤–∞—Ç—ñ. –ó–∞–∂–∏–≤—à–µ —Ç–∞—Ç—É –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ. –ë—É–¥—É –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º –¥—Ä—É–∑—è–º —ñ –∑–Ω–∞–π–æ–º–∏–º —ñ –≤–µ—Ä–Ω—É—Å—å –∑–∞ –¥—Ä—É–≥–∏–º —Ç–∞—Ç—É",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default2-3",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/a1e30bb9c104bd25e0eb8a67f857180939b05fb1?width=124",
    text: "üî•",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default2-4",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/50539832474100cc93c13a30455d91939b986e3b?width=124",
    text: "–î—É–∂–µ –¥—è–∫—É—é –∑–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —ñ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–∑–º!",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
  {
    id: "default2-5",
    avatar: "https://api.builder.io/api/v1/image/assets/TEMP/2729787a24c3ce7f2d8e56cf9df4a559357dd1cc?width=124",
    text: "–í—Å–µ –¥—É–∂–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å, –ø—Ä–∏–π–¥—É —â–µ!",
    stars: 5,
    createdAt: new Date().toISOString(),
  },
];

export function useMainReviews() {
  const [reviews1, setReviews1] = useState<MainReview[]>([]);
  const [reviews2, setReviews2] = useState<MainReview[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –∑ API
  const loadReviews = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
  const response = await fetch('http://localhost:3001/api/reviews');
      if (!response.ok) {
        throw new Error('Failed to fetch reviews');
      }
      
      const data = await response.json();
      const apiReviews: Review[] = data.reviews || [];
      
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ API –≤—ñ–¥–≥—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI
                        const uiReviews: MainReview[] = apiReviews.map(review => {
                    const stars = review.stars !== undefined ? review.stars : 5;
                    return {
          id: review.id,
          text: review.text,
          createdAt: review.createdAt,
          avatar: review.avatar || "https://api.builder.io/api/v1/image/assets/TEMP/50539832474100cc93c13a30455d91939b986e3b?width=124",
          stars: stars
        };
      });
      
      // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –≤—ñ–¥–≥—É–∫–∏ –º—ñ–∂ –¥–≤–æ–º–∞ —Ä—è–¥–∫–∞–º–∏
      const allReviews = [...defaultReviews1, ...defaultReviews2, ...uiReviews];
      const half = Math.ceil(allReviews.length / 2);
      
      setReviews1(allReviews.slice(0, half));
      setReviews2(allReviews.slice(half));
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load reviews');
      console.error('Error loading reviews:', err);
      
      // –Ø–∫—â–æ API –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –≤—ñ–¥–≥—É–∫–∏
      setReviews1(defaultReviews1);
      setReviews2(defaultReviews2);
    } finally {
      setIsLoading(false);
    }
  };

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
  const addReview = async (review: { avatar: string; text: string; stars?: number }) => {
    try {
      setIsLoading(true);
      setError(null);
      
  const response = await fetch('http://localhost:3001/api/reviews', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: review.text,
          avatar: review.avatar,
          stars: review.stars
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to add review');
      }
      
      const data = await response.json();
      const newReview: MainReview = {
        id: data.review.id,
        text: data.review.text,
        createdAt: data.review.createdAt,
        avatar: data.review.avatar || review.avatar,
        stars: data.review.stars !== undefined ? data.review.stars : (review.stars !== undefined ? review.stars : 5)
      };
      
      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–≥—É–∫–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
      await loadReviews();
      
      return newReview;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to add review');
      console.error('Error adding review:', err);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    loadReviews();
  }, []);

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Ü—ñ–Ω–∫–∏
  const calculateAverageRating = (): number => {
    const allReviews = [...reviews1, ...reviews2];
    if (allReviews.length === 0) return 5; // –î–µ—Ñ–æ–ª—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —è–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤
    
    const totalStars = allReviews.reduce((sum, review) => sum + (review.stars || 5), 0);
    const average = totalStars / allReviews.length;
    
    // –û–∫—Ä—É–≥–ª—è—î–º–æ –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø—ñ—Å–ª—è –∫–æ–º–∏
    return Math.round(average * 10) / 10;
  };

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≥—É–∫—ñ–≤
  const getReviewsCount = (): number => {
    return reviews1.length + reviews2.length;
  };

  return {
    reviews1,
    reviews2,
    isLoading,
    error,
    addReview,
    loadReviews,
    averageRating: calculateAverageRating(),
    reviewsCount: getReviewsCount()
  };
}
